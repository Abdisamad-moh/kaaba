{% extends 'admin_base2.html.twig' %}
{% import 'macros/_form_macros.html.twig' as macros %}

{% block title %}
    Scholarship Applications
{% endblock %}

{% block body %}
<div class="" data-controller="employer">
    <div class="card bg-info-subtle shadow-none position-relative overflow-hidden mb-4">
        <div class="card-body px-4 py-3">
            <div class="row align-items-center">
                <div class="col-9">
                    <h4 class="fw-semibold mb-8">
                        <i class="ti ti-users fs-8"></i>
                        Scholarship Applications
                    </h4>
                    <span class="badge bg-primary">Total: {{ total_count }}</span>
                </div>
                <div class="col-3">
                    
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="datatables">
                <div class="card">
                    <div class="card-body">
                        {{ macros.render_search_form(searchForm, 'Filter Applications') }}

                        <div class="table-responsive">
                            <table id="file_export" class="table w-100 table-striped table-bordered display text-nowrap" width="100%" data-controller="general">
                                <thead>
                                    <tr>
                                        <th>Applicant Details</th>
                                        <th>Scholarship & Course</th>
                                        <th>Region & District</th>
                                        <th>Institue & Highest Qualifications</th>
                                        <th>Application Date</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for application in applications %}
                                        <tr id="application-{{ application.id }}">
                                            <td>
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <strong>{{ application.fullname }}</strong>
                                                    {% if application.gender %}
                                                        <span class="badge bg-dark ms-2">{{ application.gender.name }}</span>
                                                    {% endif %}
                                                </div>
                                                {% if application.dateofbirth %}
                                                    <div class="text-muted small">DOB: {{ application.dateofbirth|date('d-m-Y') }}</div>
                                                {% endif %}
                                                <div class="text-primary small mt-1">
                                                    <i class="ti ti-phone"></i> {{ application.phone }}
                                                </div>
                                          
                                            </td>
                                            <td>
                                                {% if application.scholarship %}
                                                    <div class="fw-bold text-purple">
                                                        {{ application.scholarship.title|length > 30 ? application.scholarship.title|slice(0, 30) ~ '...' : application.scholarship.title }}
                                                    </div>
                                                    {% if not application.scholarship.status %}
                                                        <small class="text-danger">(Inactive)</small>
                                                    {% endif %}
                                                {% else %}
                                                    <span class="text-muted">N/A</span>
                                                {% endif %}
                                                {% if application.course %}
                                                    <div class="text-info small mt-1">
                                                        <i class="ti ti-book"></i> {{ application.course.name }}
                                                    </div>
                                                {% endif %}
                                            </td>
                                            <td>
                                                {% if application.region %}
                                                    <div class="fw-medium text-dark">{{ application.region.name }}</div>
                                                {% else %}
                                                    <span class="text-muted">N/A</span>
                                                {% endif %}
                                                {% if application.district %}
                                                    <div class="text-muted small">{{ application.district.name }}</div>
                                                {% endif %}
                                            </td>
                                            <td>
                                                {% if application.institute %}
                                                    <div class="fw-medium text-primary">{{ application.institute.name }}</div>
                                                {% else %}
                                                    <span class="text-muted">N/A</span>
                                                {% endif %}
                                                {% if application.highestqualification %}
                                                    <div class="text-warning small">{{ application.highestqualification.name }}</div>
                                                {% endif %}
                                            </td>
                                            <td>
                                                {{ application.applicationdate|date('d-m-Y') }}
                                                <div class="text-muted small">
                                                    {% if application.shortlisteddate %}
                                                        <div>Shortlisted: {{ application.shortlisteddate|date('d-m-Y') }}</div>
                                                    {% endif %}
                                                    {% if application.accepteddate %}
                                                        <div>Accepted: {{ application.accepteddate|date('d-m-Y') }}</div>
                                                    {% endif %}
                                                    {% if application.rejecteddate %}
                                                        <div>Rejected: {{ application.rejecteddate|date('d-m-Y') }}</div>
                                                    {% endif %}
                                                </div>
                                            </td>
                                            <td id="status-{{ application.id }}">
                                                {% if application.status %}
                                                    <span class="badge 
                                                        {% if application.status.name == 'applied' or application.status.name == 'Applied' %}bg-primary
                                                        {% elseif application.status.name == 'rejected' or application.status.name == 'Rejected' %}bg-danger
                                                        {% elseif application.status.name == 'shortlisted' or application.status.name == 'Shortlisted' %}bg-info text-white
                                                        {% elseif application.status.name == 'accepted' or application.status.name == 'Accepted' %}bg-success
                                                        {% elseif application.status.name == 'Under Review' %}bg-primary
                                                        {% else %}bg-secondary{% endif %}">
                                                        {{ application.status.name }}
                                                    </span>
                                                {% else %}
                                                    <span class="badge bg-warning text-dark">Pending</span>
                                                {% endif %}
                                            </td>
                                            <td>
                                                <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                                                    <div class="btn-group me-2 mb-2" role="group" aria-label="Application actions">
                                                       <a href="{{ path('app_admin_kaaba_application_view', {'uuid': application.uuid}) }}" 
   class="btn btn-secondary btn-sm" 
   title="View Application Details">
    <i class="ti ti-eye fs-4"></i>
    View
</a>

                                                        
                                                       {% set statusName = application.status ? application.status.name|lower : '' %}

{# Only show Update Status dropdown if NOT rejected #}
{% if statusName != 'rejected' %}
    <div class="btn-group dropend" role="group">
        <button type="button"
                class="btn btn-primary btn-sm dropdown-toggle"
                data-bs-toggle="dropdown"
                data-bs-boundary="viewport"
                aria-expanded="false"
                {% if statusName in ['accepted'] %}disabled{% endif %}>
            <i class="ti ti-edit fs-4"></i>
            Update Status
        </button>

        <ul class="dropdown-menu">
            {# Show Shortlist option only if not already shortlisted, accepted, or rejected #}
            {% if not application.status or (statusName not in ['shortlisted', 'accepted', 'rejected']) %}
                <li class="bg-info">
                    <a class="dropdown-item update-status bg-info text-white" href="#"
                       data-application-id="{{ application.id }}"
                       data-status-action="shortlisted"
                       data-applicant-name="{{ application.fullname }}">
                        <i class="ti ti-check text-white me-2 fs-20"></i>
                        Shortlist Application
                    </a>
                </li>
            {% endif %}

            {# Show Accept option only if currently shortlisted #}
            {% if statusName == 'shortlisted' %}
                <li class="bg-success">
                    <a class="dropdown-item update-status bg-success text-white" href="#"
                       data-application-id="{{ application.id }}"
                       data-status-action="accepted"
                       data-applicant-name="{{ application.fullname }}">
                        <i class="ti ti-check text-white me-2 fs-20"></i>
                        Accept Application
                    </a>
                </li>
            {% endif %}

            <li><hr class="dropdown-divider"></li>

            {# Always show Reject option unless already rejected #}
            {% if statusName != 'rejected' %}
                <li class="bg-danger">
                    <a class="dropdown-item update-status bg-danger text-white" href="#"
                       data-application-id="{{ application.id }}"
                       data-status-action="rejected"
                       data-applicant-name="{{ application.fullname }}">
                        <i class="ti ti-x text-white me-2 fs-20"></i>
                        Reject Application
                    </a>
                </li>
            {% endif %}
        </ul>
    </div>
{% endif %}

{# Revert Status Button - Show for Accepted and Shortlisted statuses #}
{% if statusName in ['accepted', 'shortlisted'] %}
    <button type="button" 
            class="btn btn-dark btn-sm revert-status"
            data-application-id="{{ application.id }}"
            data-applicant-name="{{ application.fullname }}"
            title="Revert to previous status">
        <i class="ti ti-arrow-back-up fs-4"></i>
        Revert
    </button>
{% endif %}

{# Revert Rejected Button - Show only for Rejected status #}
{% if statusName == 'rejected' %}
    <button type="button" 
            class="btn btn-dark btn-sm revert-rejected"
            data-application-id="{{ application.id }}"
            data-applicant-name="{{ application.fullname }}"
            title="Revert rejected application to applied">
        <i class="ti ti-arrow-back-up fs-4"></i>
        Revert to Applied
    </button>
{% endif %}

    <button class="btn text-white btn-sm" style="background: gray;"
       data-action="click->general#operations" data-type="get logs" data-item="{{ application.uuid }}" data-url="{{ path('app_admin_kaaba_application_logs', {'uuid': application.uuid}) }}" data-utility-modal-param="fullModal">
        <i class="ti ti-history me-2"></i> View Logs
    </button>

                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    {% else %}
                                        <tr>
                                            <td colspan="7" class="text-center py-4">
                                                <div class="alert alert-info mb-0">
                                                    <i class="ti ti-info-circle me-2"></i>
                                                    No scholarship applications found.
                                                </div>
                                            </td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <div class="text-muted">
                                Showing {{ applications.getCurrentPageNumber }} of {{ applications.getPageCount }} pages
                                (Total: {{ total_count }} applications)
                            </div>
                            <div>
                                {{ knp_pagination_render(applications) }}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="fullModal" tabindex="-1" aria-labelledby="fullModalLabel" aria-hidden="true">
   <div class="modal-dialog modal-lg modal-dialog-scrollable">
      <div class="modal-content">
         <div class="modal-header">
            <h5 class="modal-title" id="fullModalLabel">Loading...</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
         </div>
         <div class="modal-body" id="fullModalBody">
            <div class="text-center py-5">
               <div class="spinner-border" role="status"></div>
            </div>
         </div>
         <div class="modal-footer" id="fullModalFooter">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
         </div>
      </div>
   </div>
</div>
<style>
.bg-danger{
background-color:red !important;
} 
.fs-20{
font-size:20px;
}
.bg-purple {
    background-color: #6f42c1 !important;
}
.text-purple {
    color: #6f42c1 !important;
}

.btn-loading {
    position: relative;
    color: transparent !important;
}

.btn-loading::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    top: 50%;
    left: 50%;
    margin-left: -8px;
    margin-top: -8px;
    border: 2px solid #ffffff;
    border-radius: 50%;
    border-right-color: transparent;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

.table-responsive .dropdown-menu {
    position: absolute;
    z-index: 1060;
}

/* Improve table readability */
.table td {
    vertical-align: top;
    padding: 12px 8px;
}
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<!-- Include SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Status update functionality with SweetAlert confirmation
    document.querySelectorAll('.update-status').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            
            const applicationId = this.getAttribute('data-application-id');
            const statusAction = this.getAttribute('data-status-action');
            const applicantName = this.getAttribute('data-applicant-name');
            
            // Set confirmation message based on status
            let actionText = '';
            let title = '';
            let icon = 'question';
            
            switch(statusAction) {
                case 'shortlisted':
                    actionText = 'shortlist';
                    title = 'Shortlist Application';
                    icon = 'info';
                    break;
                case 'accepted':
                    actionText = 'accept';
                    title = 'Accept Application';
                    icon = 'success';
                    break;
                case 'rejected':
                    actionText = 'reject';
                    title = 'Reject Application';
                    icon = 'warning';
                    break;
            }
            
            const message = `Are you sure you want to ${actionText} the application for <strong>${applicantName}</strong>?`;
            
            // Show SweetAlert confirmation
            Swal.fire({
                title: title,
                html: message,
                icon: icon,
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, update status!',
                cancelButtonText: 'Cancel',
                showLoaderOnConfirm: true,
                preConfirm: () => {
                    return fetch('{{ path("app_admin_kaaba_application_update_status") }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({
                            applicationId: applicationId,
                            statusAction: statusAction,
                            _token: '{{ csrf_token("update_application_status") }}',
                        }),
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Update status badge
                            const statusBadge = document.getElementById(`status-${applicationId}`);
                            if (statusBadge) {
                                statusBadge.innerHTML = data.newStatusBadge;
                            }
                            
                            // Show success message
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                // Reload the page to reflect changes in the dropdown
                                window.location.reload();
                            });
                        } else {
                            throw new Error(data.message || 'Failed to update status');
                        }
                    })
                    .catch(error => {
                        Swal.showValidationMessage(
                            `Request failed: ${error.message}`
                        );
                    });
                },
                allowOutsideClick: () => !Swal.isLoading()
            });
        });
    });

// Revert Status functionality
document.querySelectorAll('.revert-status').forEach(button => {
    button.addEventListener('click', function(e) {
        e.preventDefault();
        
        const applicationId = this.getAttribute('data-application-id');
        const applicantName = this.getAttribute('data-applicant-name');
        
        // Show SweetAlert confirmation
        Swal.fire({
            title: 'Revert Status',
            html: `Are you sure you want to revert the status for <strong>${applicantName}</strong> to the previous status?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#ffc107',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, revert status!',
            cancelButtonText: 'Cancel',
            showLoaderOnConfirm: true,
            preConfirm: () => {
                const formData = new URLSearchParams();
                formData.append('_token', '{{ csrf_token("revert_application_status") }}');
                
                return fetch(`/admin/kaaba-applications/revert-status/${applicationId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        // Get the error message from the response
                        return response.json().then(errorData => {
                            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Update status badge
                        const statusBadge = document.getElementById(`status-${applicationId}`);
                        if (statusBadge) {
                            statusBadge.innerHTML = data.newStatusBadge;
                        }
                        
                        return data;
                    } else {
                        throw new Error(data.message || 'Failed to revert status');
                    }
                })
                .catch(error => {
                    Swal.showValidationMessage(
                        `Request failed: ${error.message}`
                    );
                });
            },
            allowOutsideClick: () => !Swal.isLoading()
        }).then((result) => {
            if (result.isConfirmed && result.value) {
                Swal.fire({
                    title: 'Success!',
                    text: result.value.message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    // Reload the page to reflect changes
                    window.location.reload();
                });
            }
        });
    });
});

// Revert Rejected functionality
document.querySelectorAll('.revert-rejected').forEach(button => {
    button.addEventListener('click', function(e) {
        e.preventDefault();
        
        const applicationId = this.getAttribute('data-application-id');
        const applicantName = this.getAttribute('data-applicant-name');
        
        // Show SweetAlert confirmation
        Swal.fire({
            title: 'Revert Rejected Application',
            html: `Are you sure you want to revert the rejected application for <strong>${applicantName}</strong> back to Applied status?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#17a2b8',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, revert to applied!',
            cancelButtonText: 'Cancel',
            showLoaderOnConfirm: true,
            preConfirm: () => {
                const formData = new URLSearchParams();
                formData.append('_token', '{{ csrf_token("revert_rejected_application") }}');
                
                return fetch(`/admin/kaaba-applications/revert-rejected/${applicationId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        // Get the error message from the response
                        return response.json().then(errorData => {
                            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Update status badge
                        const statusBadge = document.getElementById(`status-${applicationId}`);
                        if (statusBadge) {
                            statusBadge.innerHTML = data.newStatusBadge;
                        }
                        
                        return data;
                    } else {
                        throw new Error(data.message || 'Failed to revert rejected application');
                    }
                })
                .catch(error => {
                    Swal.showValidationMessage(
                        `Request failed: ${error.message}`
                    );
                });
            },
            allowOutsideClick: () => !Swal.isLoading()
        }).then((result) => {
            if (result.isConfirmed && result.value) {
                Swal.fire({
                    title: 'Success!',
                    text: result.value.message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    // Reload the page to reflect changes
                    window.location.reload();
                });
            }
        });
    });
});
});
</script>
{% endblock %}